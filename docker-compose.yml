version: '2.3'
services:
  astarte-housekeeping:
    image: astarte/astarte_housekeeping:1.0.0-beta.1
    build:
      context: apps/astarte_housekeeping
    env_file:
     - ./compose.env
    ports:
      - "4008:4000"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-housekeeping-api:
    image: astarte/astarte_housekeeping_api:1.0.0-beta.1
    build:
      context: apps/astarte_housekeeping_api
    env_file:
     - ./compose.env
    environment:
      HOUSEKEEPING_API_JWT_PUBLIC_KEY_PATH: "/keys/housekeeping_public.pem"
    ports:
      - "4001:4001"
    volumes:
      - type: bind
        source: ./compose/astarte-keys/housekeeping_public.pem
        target: /keys/housekeeping_public.pem
    restart: on-failure
    depends_on:
      - "rabbitmq"

  astarte-realm-management:
    image: astarte/astarte_realm_management:1.0.0-beta.1
    build:
      context: apps/astarte_realm_management
    env_file:
     - ./compose.env
    ports:
      - "4006:4000"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-realm-management-api:
    image: astarte/astarte_realm_management_api:1.0.0-beta.1
    build:
      context: apps/astarte_realm_management_api
    env_file:
     - ./compose.env
    ports:
      - "4000:4000"
    restart: on-failure
    depends_on:
      - "rabbitmq"

  astarte-pairing:
    image: astarte/astarte_pairing:1.0.0-beta.1
    build:
      context: apps/astarte_pairing
    env_file:
     - ./compose.env
    ports:
        - "4005:4000"
    environment:
      PAIRING_CFSSL_URL: "http://cfssl:8080"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-pairing-api:
    image: astarte/astarte_pairing_api:1.0.0-beta.1
    build:
      context: apps/astarte_pairing_api
    env_file:
     - ./compose.env
    ports:
      - "4003:4003"
    restart: on-failure
    depends_on:
      - "rabbitmq"

  astarte-appengine-api:
    image: astarte/astarte_appengine_api:1.0.0-beta.1
    build:
      context: apps/astarte_appengine_api
    env_file:
     - ./compose.env
    environment:
      APPENGINE_API_MQTT_HOST: "vernemq"
      APPENGINE_API_MQTT_USERNAME: "appengine"
      APPENGINE_API_MQTT_PASSWORD: "appengine"
      APPENGINE_API_ROOMS_AMQP_CLIENT_HOST: "rabbitmq"
    ports:
      - "4002:4002"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-data-updater-plant:
    image: astarte/astarte_data_updater_plant:1.0.0-beta.1
    build:
      context: apps/astarte_data_updater_plant
    env_file:
     - ./compose.env
    ports:
      - "4004:4000"
    environment:
      DATA_UPDATER_PLANT_AMQP_CONSUMER_HOST: "rabbitmq"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_HOST: "rabbitmq"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_PORT: "5672"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_USERNAME: "guest"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_PASSWORD: "guest"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_VIRTUAL_HOST: "/"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-trigger-engine:
    image: astarte/astarte_trigger_engine:1.0.0-beta.1
    build:
      context: apps/astarte_trigger_engine
    env_file:
     - ./compose.env
    ports:
      - "4007:4000"
    environment:
      TRIGGER_ENGINE_AMQP_CONSUMER_HOST: "rabbitmq"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-dashboard:
    image: astarte/astarte-dashboard:1.0.0-beta.1
    ports:
      - "4040:80"
    volumes:
      - ./compose/astarte-dashboard/config.json:/usr/share/nginx/html/user-config/config.json
    depends_on:
      - "astarte-realm-management-api"
      - "astarte-appengine-api"

  astarte-grafana:
    image: astarte/grafana:1.0.0-beta.1
    ports:
      - "3000:3000"
    depends_on:
      - "astarte-appengine-api"

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.8
    restart: on-failure
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  # CFSSL
  cfssl:
    image: astarte/cfssl
    volumes:
      - ./compose/cfssl-config:/config
      - cfssl-data:/data
    command: cfssl serve -address=0.0.0.0 -ca=/data/ca.pem -ca-key=/data/ca-key.pem -port=8080 -config=/etc/cfssl/ca_root_config.json
    # Restart if we fail
    restart: on-failure

  # Scylla
  scylla:
    image: scylladb/scylla:4.1.rc2
    volumes:
      - scylla-data:/var/lib/scylla

  # VerneMQ
  vernemq:
    image: astarte/vernemq:1.0.0-beta.1
    env_file:
     - ./compose.env
    environment:
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CAFILE: "/opt/vernemq/etc/ca.pem"
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CERTFILE: "/opt/vernemq/etc/cert.pem"
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__KEYFILE: "/opt/vernemq/etc/privkey.pem"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__USERNAME: "guest"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__PASSWORD: "guest"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__HOST: "rabbitmq"
      DOCKER_VERNEMQ_USER_appengine: "appengine"
      CFSSL_URL: "http://cfssl:8080"
    ports:
      # 1883 is used internally and isn't exposed
      # Used with HAProxy only
      - "1885:1885"
      # Used with SSL Listener only
      - "8883:8883"
      # You can comment this out if you don't need Let's Encrypt
      - "80:80"
      # HTTP Listener for health check
      - "8888:8888"
    volumes:
      - vernemq-data:/opt/vernemq/data
      - ./compose/vernemq-certs:/etc/ssl/vernemq-certs
    depends_on:
      - "cfssl"
      - "rabbitmq"
    # Ensure we wait for rabbit and cfssl
    command: wait-for rabbitmq:5672 -t 90 -- wait-for cfssl:8080 -t 90 -- /opt/vernemq/bin/vernemq.sh
    # Restart if we fail
    restart: on-failure
volumes:
  rabbitmq-data:
  scylla-data:
  vernemq-data:
  cfssl-data:
